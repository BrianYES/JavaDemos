<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--<properties resource="org/mybatis/example/config.properties">-->
        <!--<property name="username" value="dev_user"/>-->
        <!--<property name="password" value="F2Fa3!33TYyg"/>-->
    <!--</properties>-->

    <settings>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。-->
        <!--默认值：false-->
        <setting name="mapUnderscoreToCamelCase" value="false" />
        <!--指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。-->
        <!--默认值：false-->
        <setting name="callSettersOnNulls" value="true"/>
        <!--当返回行的所有列都是空时，MyBatis默认返回null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 (i.e. collectioin and association)。（从3.4.2开始）-->
        <!--默认值：false-->
        <setting name="returnInstanceForEmptyRow" value="false" />
        <!--指定 MyBatis 所用日志的具体实现，未指定时将自动查找。-->
        <!--SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING-->
        <setting name="logImpl" value="LOG4J"/>
    </settings>

    <!--类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余-->
    <typeAliases>
        <package name="shiro.domain" />
    </typeAliases>

    <!--<typeHandlers>-->
        <!--<typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="java.math.RoundingMode"/>-->
    <!--</typeHandlers>-->

    <!--<objectFactory type="org.mybatis.example.ExampleObjectFactory">-->
        <!--<property name="someProperty" value="100"/>-->
    <!--</objectFactory>-->

    <!--<plugins>-->
        <!--<plugin interceptor="org.mybatis.example.ExamplePlugin">-->
            <!--<property name="someProperty" value="100"/>-->
        <!--</plugin>-->
    <!--</plugins>-->

    <!--<environments default="development">-->
        <!--<environment id="development">-->
            <!--<transactionManager type="JDBC">-->
                <!--<property name="..." value="..."/>-->
            <!--</transactionManager>-->
            <!--<dataSource type="POOLED">-->
                <!--<property name="driver" value="${driver}"/>-->
                <!--<property name="url" value="${url}"/>-->
                <!--<property name="username" value="${username}"/>-->
                <!--<property name="password" value="${password}"/>-->
            <!--</dataSource>-->
        <!--</environment>-->
    <!--</environments>-->

    <!--<databaseIdProvider type="DB_VENDOR">-->
        <!--<property name="SQL Server" value="sqlserver"/>-->
        <!--<property name="DB2" value="db2"/>-->
        <!--<property name="Oracle" value="oracle" />-->
    <!--</databaseIdProvider>-->

    <!--&lt;!&ndash; 使用相对于类路径的资源引用 &ndash;&gt;-->
    <!--<mappers>-->
        <!--<mapper resource="org/mybatis/builder/AuthorMapper.xml"/>-->
        <!--<mapper resource="org/mybatis/builder/BlogMapper.xml"/>-->
        <!--<mapper resource="org/mybatis/builder/PostMapper.xml"/>-->
    <!--</mappers>-->
    <!--&lt;!&ndash; 使用完全限定资源定位符（URL） &ndash;&gt;-->
    <!--<mappers>-->
        <!--<mapper url="file:///var/mappers/AuthorMapper.xml"/>-->
        <!--<mapper url="file:///var/mappers/BlogMapper.xml"/>-->
        <!--<mapper url="file:///var/mappers/PostMapper.xml"/>-->
    <!--</mappers>-->
    <!--&lt;!&ndash; 使用映射器接口实现类的完全限定类名 &ndash;&gt;-->
    <!--<mappers>-->
        <!--<mapper class="org.mybatis.builder.AuthorMapper"/>-->
        <!--<mapper class="org.mybatis.builder.BlogMapper"/>-->
        <!--<mapper class="org.mybatis.builder.PostMapper"/>-->
    <!--</mappers>-->
    <!--&lt;!&ndash; 将包内的映射器接口实现全部注册为映射器 &ndash;&gt;-->
    <!--<mappers>-->
        <!--<package name="org.mybatis.builder"/>-->
    <!--</mappers>-->
</configuration>